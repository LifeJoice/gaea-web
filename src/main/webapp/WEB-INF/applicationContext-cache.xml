<?xml version='1.0' encoding='UTF-8' ?>
<!-- was: <?xml version="1.0" encoding="UTF-8"?> -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- scanner redis properties -->
    <!--<context:property-placeholder location="classpath:property/redis.properties" />-->
    <!--注意此处注入的是JedisPoolConfig，说明SDR还依赖与Jedis-->
    <bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="300"/>
        <!--新版本没有maxActive等俩属性，改为下面俩-->
        <property name="maxTotal" value="600"/>
        <property name="maxWaitMillis" value="2000"/>
        <property name="testOnBorrow" value="true"/>
    </bean>

    <bean id="connectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="localhost" p:port="6379" p:password=""
          p:poolConfig-ref="redisPoolConfig"/>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--         如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast to String！！！-->
        <!--通用配置。正常key都是String吧。 by Iverson 2016-3-10 15:23:43-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--<property name="valueSerializer">-->
        <!--<bean-->
        <!--class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
    </bean>

    <!--这个主要是json用。因为每次调用都需要设置特定的valueSerializer，不跟上面的redisTemplate混了。-->
    <bean id="jsonRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--         如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast to String！！！-->
        <!--通用配置。正常key都是String吧。 by Iverson 2016-3-10 15:23:43-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--<property name="valueSerializer">-->
        <!--<bean-->
        <!--class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
    </bean>
    <!-- 移动system-cache.properties到classpath中 by Iverson 2017年1月11日 星期三 -->
    <bean id="cachePropReader" class="org.gaea.util.GaeaPropertiesReader">
        <constructor-arg>
            <list value-type="java.lang.String">
                <value>classpath:config/sys/db/system-cache.properties</value>
            </list>
        </constructor-arg>
        <!--<constructor-arg ref="dsPropResource" />-->
    </bean>

    <!--<bean id="dsPropResource" class="org.springframework.web.context.support.ServletContextResource">-->
        <!--<constructor-arg ref="servletContext" />-->
        <!--<constructor-arg value="/WEB-INF/system-cache.properties" />-->
    <!--</bean>-->
</beans>

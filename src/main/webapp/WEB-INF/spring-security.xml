<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://www.springframework.org/schema/security"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!--<http use-expressions="true">-->
    <http auto-config="false" use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint">
        <!--<headers disabled="true"/>-->
        <!--<csrf disabled="true"/>-->
        <!-- 不要过滤图片等静态资源 -->
        <intercept-url pattern="/**/*.jpg"  access="permitAll"/>
        <intercept-url pattern="/**/*.png"  access="permitAll"/>
        <intercept-url pattern="/**/*.gif"  access="permitAll"/>
        <intercept-url pattern="/**/*.css"  access="permitAll"/>
        <intercept-url pattern="/**/*.js"  access="permitAll"/>
        <!-- 登录页面和忘记密码页面不过滤  -->
        <!--<intercept-url pattern="/login"  access="permitAll"/>-->
        <!--<intercept-url pattern="/login" access="permitAll"/>-->
        <!--<intercept-url pattern="/**" access="hasRole('USER')"/>-->
        <!--不能用form-login。用了下面的custom-filter替换FORM_LOGIN_FILTER就会无效！-->
        <!--<form-login login-page="/login"-->
                    <!--default-target-url="/system/main.html"/>-->
        <!--<logout logout-url="/j_spring_security_logout"/>-->
        <!--自定义用户登录的过滤器-->
        <custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER"  />
        <!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前，
实现用户、角色、权限、资源的数据库管理。  -->
        <custom-filter ref="gaea-filter" before="FILTER_SECURITY_INTERCEPTOR"/>
        <csrf disabled="true"/>
    </http>

    <!-- 登录验证器 -->
    <b:bean id="loginFilter"
                class="org.gaea.security.extend.GaeaUsernamePasswordAuthenticationFilter">
        <!-- 处理登录的action -->
        <b:property name="filterProcessesUrl" value="/j_spring_security_check"></b:property>
        <!-- 验证成功后的处理-->
        <!--<b:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"></b:property>-->
        <!-- 验证失败后的处理-->
        <!--<b:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"></b:property>-->
        <b:property name="authenticationManager" ref="authenticationManager"></b:property>
    </b:bean>

    <!-- 未登录的切入点 -->
    <b:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <!--<b:property name="loginFormUrl" value="/login"></b:property>-->
        <b:constructor-arg value="/system/login.html"/>
    </b:bean>

    <!-- 一个自定义的filter，必须包含authenticationManager,
  accessDecisionManager,securityMetadataSource三个属性。  -->
    <b:bean id="gaea-filter"
            class="org.gaea.security.extend.GaeaFilterSecurityInterceptor">
        <b:property name="authenticationManager"
                    ref="authenticationManager"/>
        <b:property name="accessDecisionManager"
                    ref="myAccessDecisionManager"/>
        <b:property name="securityMetadataSource"
                    ref="mySecurityMetadataSource"/>
        <!--
        启用. 登录成功后，发布AuthorizedEvent事件.
        我们可以在监听到事件后，缓存已登录用户的信息（例如：角色）等-->
        <b:property name="publishAuthorizationSuccess" value="true" />
    </b:bean>

    <!-- 注意能够为authentication-manager 设置alias别名  -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userDetailsManager">
            <password-encoder ref="passwordEncoder"/>
            <!--<password-encoder ref="passwordEncoder">-->
                <!--<salt-source user-property="username" />-->
            <!--</password-encoder>-->
        </authentication-provider>
    </authentication-manager>


    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
    <b:bean id="myAccessDecisionManager"
            class="org.gaea.security.extend.GaeaAccessDecisionManager">
    </b:bean>


    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 -->
    <b:bean id="mySecurityMetadataSource"
            class="org.gaea.security.extend.GaeaFilterInvocationSecurityMetadataSource">
    </b:bean>

    <!-- 用户的密码加密或解密. BCrypt比MD5更好 -->
    <!--<b:bean id="passwordEncoder"-->
    <!--class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />-->
    <b:bean id="passwordEncoder"
            class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!-- 用户详细信息管理：数据源、用户缓存（通过数据库管理用户、角色、权限、资源）。 -->
    <b:bean id="userDetailsManager" class="org.gaea.security.extend.GaeaUserDetailsService">
        <!--<b:property name="pubUsersHome" ref="pubUsersHome" />-->
        <!--<b:property name="pubAuthoritiesResourcesHome" ref="pubAuthoritiesResourcesHome" />-->
        <!--<b:property name="dataSource" ref="dataSource" />-->
        <!--<b:property name="userCache" ref="userCache" />-->
    </b:bean>

    <!--<authentication-manager>-->
        <!--<authentication-provider>-->
            <!--<user-service>-->
                <!--<user name="user" password="password" authorities="ROLE_USER"/>-->
                <!--<user name="admin" password="password" authorities="ROLE_USER,ROLE_ADMIN"/>-->
            <!--</user-service>-->
        <!--</authentication-provider>-->
    <!--</authentication-manager>-->

    <!--<global-method-security pre-post-annotations="enabled"/>-->
</b:beans>